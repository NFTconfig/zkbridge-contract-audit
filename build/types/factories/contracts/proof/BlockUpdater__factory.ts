/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  BlockUpdater,
  BlockUpdaterInterface,
} from "../../../contracts/proof/BlockUpdater";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "receiptHash",
        type: "bytes32",
      },
    ],
    name: "checkBlock",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060ab8061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063dc3588ea14602d575b600080fd5b604060383660046054565b600192915050565b604051901515815260200160405180910390f35b60008060408385031215606657600080fd5b5050803592602090910135915056fea2646970667358221220822e608e71118e3c5637f4818a1165287ca06d73eb8474285edf743330ac078e64736f6c634300080e0033";

type BlockUpdaterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BlockUpdaterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BlockUpdater__factory extends ContractFactory {
  constructor(...args: BlockUpdaterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BlockUpdater> {
    return super.deploy(overrides || {}) as Promise<BlockUpdater>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BlockUpdater {
    return super.attach(address) as BlockUpdater;
  }
  override connect(signer: Signer): BlockUpdater__factory {
    return super.connect(signer) as BlockUpdater__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BlockUpdaterInterface {
    return new utils.Interface(_abi) as BlockUpdaterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BlockUpdater {
    return new Contract(address, _abi, signerOrProvider) as BlockUpdater;
  }
}
