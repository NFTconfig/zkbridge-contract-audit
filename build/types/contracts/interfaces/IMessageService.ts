/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IMessageServiceInterface extends utils.Interface {
  functions: {
    "claimMessage(address,address,uint256,uint256,address,bytes,uint256)": FunctionFragment;
    "minimumFeeInWei()": FunctionFragment;
    "sendMessage(address,uint256,bytes)": FunctionFragment;
    "sender()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claimMessage"
      | "minimumFeeInWei"
      | "sendMessage"
      | "sender"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimMessage",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "minimumFeeInWei",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessage",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "sender", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "claimMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumFeeInWei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sender", data: BytesLike): Result;

  events: {
    "MessageClaimed(bytes32)": EventFragment;
    "MessageSent(address,address,uint256,uint256,uint256,bytes,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MessageClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessageSent"): EventFragment;
}

export interface MessageClaimedEventObject {
  _messageHash: string;
}
export type MessageClaimedEvent = TypedEvent<
  [string],
  MessageClaimedEventObject
>;

export type MessageClaimedEventFilter = TypedEventFilter<MessageClaimedEvent>;

export interface MessageSentEventObject {
  _from: string;
  _to: string;
  _fee: BigNumber;
  _value: BigNumber;
  _nonce: BigNumber;
  _calldata: string;
  _messageHash: string;
}
export type MessageSentEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, string, string],
  MessageSentEventObject
>;

export type MessageSentEventFilter = TypedEventFilter<MessageSentEvent>;

export interface IMessageService extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMessageServiceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimMessage(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _fee: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      _feeRecipient: PromiseOrValue<string>,
      _calldata: PromiseOrValue<BytesLike>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    minimumFeeInWei(overrides?: CallOverrides): Promise<[BigNumber]>;

    sendMessage(
      _to: PromiseOrValue<string>,
      _fee: PromiseOrValue<BigNumberish>,
      _calldata: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sender(overrides?: CallOverrides): Promise<[string]>;
  };

  claimMessage(
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _fee: PromiseOrValue<BigNumberish>,
    _value: PromiseOrValue<BigNumberish>,
    _feeRecipient: PromiseOrValue<string>,
    _calldata: PromiseOrValue<BytesLike>,
    _nonce: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  minimumFeeInWei(overrides?: CallOverrides): Promise<BigNumber>;

  sendMessage(
    _to: PromiseOrValue<string>,
    _fee: PromiseOrValue<BigNumberish>,
    _calldata: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sender(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    claimMessage(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _fee: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      _feeRecipient: PromiseOrValue<string>,
      _calldata: PromiseOrValue<BytesLike>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    minimumFeeInWei(overrides?: CallOverrides): Promise<BigNumber>;

    sendMessage(
      _to: PromiseOrValue<string>,
      _fee: PromiseOrValue<BigNumberish>,
      _calldata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    sender(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "MessageClaimed(bytes32)"(
      _messageHash?: PromiseOrValue<BytesLike> | null
    ): MessageClaimedEventFilter;
    MessageClaimed(
      _messageHash?: PromiseOrValue<BytesLike> | null
    ): MessageClaimedEventFilter;

    "MessageSent(address,address,uint256,uint256,uint256,bytes,bytes32)"(
      _from?: PromiseOrValue<string> | null,
      _to?: PromiseOrValue<string> | null,
      _fee?: null,
      _value?: null,
      _nonce?: null,
      _calldata?: null,
      _messageHash?: PromiseOrValue<BytesLike> | null
    ): MessageSentEventFilter;
    MessageSent(
      _from?: PromiseOrValue<string> | null,
      _to?: PromiseOrValue<string> | null,
      _fee?: null,
      _value?: null,
      _nonce?: null,
      _calldata?: null,
      _messageHash?: PromiseOrValue<BytesLike> | null
    ): MessageSentEventFilter;
  };

  estimateGas: {
    claimMessage(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _fee: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      _feeRecipient: PromiseOrValue<string>,
      _calldata: PromiseOrValue<BytesLike>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    minimumFeeInWei(overrides?: CallOverrides): Promise<BigNumber>;

    sendMessage(
      _to: PromiseOrValue<string>,
      _fee: PromiseOrValue<BigNumberish>,
      _calldata: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sender(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    claimMessage(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _fee: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      _feeRecipient: PromiseOrValue<string>,
      _calldata: PromiseOrValue<BytesLike>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    minimumFeeInWei(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sendMessage(
      _to: PromiseOrValue<string>,
      _fee: PromiseOrValue<BigNumberish>,
      _calldata: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sender(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
