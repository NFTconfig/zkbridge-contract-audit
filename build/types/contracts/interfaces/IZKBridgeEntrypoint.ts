/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IZKBridgeEntrypointInterface extends utils.Interface {
  functions: {
    "send(uint16,address,bytes)": FunctionFragment;
    "sendFromL2(uint16,uint16,address,bytes)": FunctionFragment;
    "validateTransactionFromL2(uint16,address,address,uint64,bytes)": FunctionFragment;
    "validateTransactionProof(uint16,bytes32,uint256,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "send"
      | "sendFromL2"
      | "validateTransactionFromL2"
      | "validateTransactionProof"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "send",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sendFromL2",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validateTransactionFromL2",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validateTransactionProof",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sendFromL2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validateTransactionFromL2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateTransactionProof",
    data: BytesLike
  ): Result;

  events: {
    "ExecutedMessage(address,uint16,uint64,address,bytes)": EventFragment;
    "MessagePublished(address,uint16,uint64,address,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExecutedMessage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessagePublished"): EventFragment;
}

export interface ExecutedMessageEventObject {
  sender: string;
  srcChainId: number;
  sequence: BigNumber;
  dstAddress: string;
  payload: string;
}
export type ExecutedMessageEvent = TypedEvent<
  [string, number, BigNumber, string, string],
  ExecutedMessageEventObject
>;

export type ExecutedMessageEventFilter = TypedEventFilter<ExecutedMessageEvent>;

export interface MessagePublishedEventObject {
  sender: string;
  dstChainId: number;
  sequence: BigNumber;
  dstAddress: string;
  payload: string;
}
export type MessagePublishedEvent = TypedEvent<
  [string, number, BigNumber, string, string],
  MessagePublishedEventObject
>;

export type MessagePublishedEventFilter =
  TypedEventFilter<MessagePublishedEvent>;

export interface IZKBridgeEntrypoint extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IZKBridgeEntrypointInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    send(
      dstChainId: PromiseOrValue<BigNumberish>,
      dstAddress: PromiseOrValue<string>,
      payload: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendFromL2(
      srcChainId: PromiseOrValue<BigNumberish>,
      dstChainId: PromiseOrValue<BigNumberish>,
      dstAddress: PromiseOrValue<string>,
      payload: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validateTransactionFromL2(
      srcChainId: PromiseOrValue<BigNumberish>,
      srcAddress: PromiseOrValue<string>,
      dstAddress: PromiseOrValue<string>,
      sequence: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validateTransactionProof(
      srcChainId: PromiseOrValue<BigNumberish>,
      srcBlockHash: PromiseOrValue<BytesLike>,
      logIndex: PromiseOrValue<BigNumberish>,
      mptProof: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  send(
    dstChainId: PromiseOrValue<BigNumberish>,
    dstAddress: PromiseOrValue<string>,
    payload: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendFromL2(
    srcChainId: PromiseOrValue<BigNumberish>,
    dstChainId: PromiseOrValue<BigNumberish>,
    dstAddress: PromiseOrValue<string>,
    payload: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validateTransactionFromL2(
    srcChainId: PromiseOrValue<BigNumberish>,
    srcAddress: PromiseOrValue<string>,
    dstAddress: PromiseOrValue<string>,
    sequence: PromiseOrValue<BigNumberish>,
    payload: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validateTransactionProof(
    srcChainId: PromiseOrValue<BigNumberish>,
    srcBlockHash: PromiseOrValue<BytesLike>,
    logIndex: PromiseOrValue<BigNumberish>,
    mptProof: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    send(
      dstChainId: PromiseOrValue<BigNumberish>,
      dstAddress: PromiseOrValue<string>,
      payload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sendFromL2(
      srcChainId: PromiseOrValue<BigNumberish>,
      dstChainId: PromiseOrValue<BigNumberish>,
      dstAddress: PromiseOrValue<string>,
      payload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateTransactionFromL2(
      srcChainId: PromiseOrValue<BigNumberish>,
      srcAddress: PromiseOrValue<string>,
      dstAddress: PromiseOrValue<string>,
      sequence: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    validateTransactionProof(
      srcChainId: PromiseOrValue<BigNumberish>,
      srcBlockHash: PromiseOrValue<BytesLike>,
      logIndex: PromiseOrValue<BigNumberish>,
      mptProof: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ExecutedMessage(address,uint16,uint64,address,bytes)"(
      sender?: PromiseOrValue<string> | null,
      srcChainId?: PromiseOrValue<BigNumberish> | null,
      sequence?: PromiseOrValue<BigNumberish> | null,
      dstAddress?: null,
      payload?: null
    ): ExecutedMessageEventFilter;
    ExecutedMessage(
      sender?: PromiseOrValue<string> | null,
      srcChainId?: PromiseOrValue<BigNumberish> | null,
      sequence?: PromiseOrValue<BigNumberish> | null,
      dstAddress?: null,
      payload?: null
    ): ExecutedMessageEventFilter;

    "MessagePublished(address,uint16,uint64,address,bytes)"(
      sender?: PromiseOrValue<string> | null,
      dstChainId?: PromiseOrValue<BigNumberish> | null,
      sequence?: PromiseOrValue<BigNumberish> | null,
      dstAddress?: null,
      payload?: null
    ): MessagePublishedEventFilter;
    MessagePublished(
      sender?: PromiseOrValue<string> | null,
      dstChainId?: PromiseOrValue<BigNumberish> | null,
      sequence?: PromiseOrValue<BigNumberish> | null,
      dstAddress?: null,
      payload?: null
    ): MessagePublishedEventFilter;
  };

  estimateGas: {
    send(
      dstChainId: PromiseOrValue<BigNumberish>,
      dstAddress: PromiseOrValue<string>,
      payload: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendFromL2(
      srcChainId: PromiseOrValue<BigNumberish>,
      dstChainId: PromiseOrValue<BigNumberish>,
      dstAddress: PromiseOrValue<string>,
      payload: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validateTransactionFromL2(
      srcChainId: PromiseOrValue<BigNumberish>,
      srcAddress: PromiseOrValue<string>,
      dstAddress: PromiseOrValue<string>,
      sequence: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validateTransactionProof(
      srcChainId: PromiseOrValue<BigNumberish>,
      srcBlockHash: PromiseOrValue<BytesLike>,
      logIndex: PromiseOrValue<BigNumberish>,
      mptProof: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    send(
      dstChainId: PromiseOrValue<BigNumberish>,
      dstAddress: PromiseOrValue<string>,
      payload: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendFromL2(
      srcChainId: PromiseOrValue<BigNumberish>,
      dstChainId: PromiseOrValue<BigNumberish>,
      dstAddress: PromiseOrValue<string>,
      payload: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validateTransactionFromL2(
      srcChainId: PromiseOrValue<BigNumberish>,
      srcAddress: PromiseOrValue<string>,
      dstAddress: PromiseOrValue<string>,
      sequence: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validateTransactionProof(
      srcChainId: PromiseOrValue<BigNumberish>,
      srcBlockHash: PromiseOrValue<BytesLike>,
      logIndex: PromiseOrValue<BigNumberish>,
      mptProof: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
