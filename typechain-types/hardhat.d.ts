/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IERC1822Proxiable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822Proxiable__factory>;
    getContractFactory(
      name: "IERC1967",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1967__factory>;
    getContractFactory(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeacon__factory>;
    getContractFactory(
      name: "ERC1967Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Proxy__factory>;
    getContractFactory(
      name: "ERC1967Upgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Upgrade__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "Getters",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Getters__factory>;
    getContractFactory(
      name: "Governance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Governance__factory>;
    getContractFactory(
      name: "IBlockUpdater",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBlockUpdater__factory>;
    getContractFactory(
      name: "ICrossDomainMessenger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICrossDomainMessenger__factory>;
    getContractFactory(
      name: "IL2MessageSend",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL2MessageSend__factory>;
    getContractFactory(
      name: "IMessageService",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMessageService__factory>;
    getContractFactory(
      name: "IMptVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMptVerifier__factory>;
    getContractFactory(
      name: "IZKBridgeEntrypoint",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IZKBridgeEntrypoint__factory>;
    getContractFactory(
      name: "IZKBridgeReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IZKBridgeReceiver__factory>;
    getContractFactory(
      name: "BlockUpdater",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BlockUpdater__factory>;
    getContractFactory(
      name: "MptVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MptVerifier__factory>;
    getContractFactory(
      name: "Setters",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Setters__factory>;
    getContractFactory(
      name: "Setup",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Setup__factory>;
    getContractFactory(
      name: "State",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.State__factory>;
    getContractFactory(
      name: "ZKBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZKBridge__factory>;
    getContractFactory(
      name: "ZKBridgeEntrypoint",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZKBridgeEntrypoint__factory>;

    getContractAt(
      name: "IERC1822Proxiable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822Proxiable>;
    getContractAt(
      name: "IERC1967",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1967>;
    getContractAt(
      name: "IBeacon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeacon>;
    getContractAt(
      name: "ERC1967Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Proxy>;
    getContractAt(
      name: "ERC1967Upgrade",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Upgrade>;
    getContractAt(
      name: "Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "Getters",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Getters>;
    getContractAt(
      name: "Governance",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Governance>;
    getContractAt(
      name: "IBlockUpdater",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBlockUpdater>;
    getContractAt(
      name: "ICrossDomainMessenger",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICrossDomainMessenger>;
    getContractAt(
      name: "IL2MessageSend",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IL2MessageSend>;
    getContractAt(
      name: "IMessageService",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMessageService>;
    getContractAt(
      name: "IMptVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMptVerifier>;
    getContractAt(
      name: "IZKBridgeEntrypoint",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IZKBridgeEntrypoint>;
    getContractAt(
      name: "IZKBridgeReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IZKBridgeReceiver>;
    getContractAt(
      name: "BlockUpdater",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BlockUpdater>;
    getContractAt(
      name: "MptVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MptVerifier>;
    getContractAt(
      name: "Setters",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Setters>;
    getContractAt(
      name: "Setup",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Setup>;
    getContractAt(
      name: "State",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.State>;
    getContractAt(
      name: "ZKBridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZKBridge>;
    getContractAt(
      name: "ZKBridgeEntrypoint",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZKBridgeEntrypoint>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
